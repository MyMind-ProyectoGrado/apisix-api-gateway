#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

version: "3"

services:
  apisix:
    image: apache/apisix:${APISIX_IMAGE_TAG:-3.12.0-debian}
    restart: always
    volumes:
      - ./apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
    depends_on:
      - etcd
    ##network_mode: host
    ports:
      - "9180:9180/tcp"
      - "9080:9080/tcp"
      - "9091:9091/tcp"
      - "9443:9443/tcp"
      - "9092:9092/tcp"
    networks:
      - apisix
      - shared-net
  
  apisix-dashboard:
    image: apache/apisix-dashboard:3.0.0-alpine
    restart: always
    volumes:
      - ./dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml:ro
    ports:
      - "9000:9000"
    depends_on:
      - etcd
    networks:
      - apisix
      - shared-net

  etcd:
    image: bitnami/etcd:3.5.11
    restart: always
    volumes:
      - etcd_data:/bitnami/etcd
    environment:
      ETCD_ENABLE_V2: "true"
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://etcd:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
    ports:
      - "2379:2379/tcp"
    networks:
      - apisix
      - shared-net


  prometheus:
    image: prom/prometheus:v2.25.0
    restart: always
    volumes:
      - ./prometheus_conf/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - apisix
      - shared-net
  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - "./grafana_conf/provisioning:/etc/grafana/provisioning"
      - "./grafana_conf/dashboards:/var/lib/grafana/dashboards"
      - "./grafana_conf/config/grafana.ini:/etc/grafana/grafana.ini"
    networks:
      - apisix
    environment:
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_SECURITY_COOKIE_SAMESITE=none
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_SECURITY_HEADERS_X_FRAME_OPTIONS=  
  load-routes:
    image: python:3.10-slim
    volumes:
      - .:/app
    working_dir: /app
    depends_on:
      - apisix
    networks:
      - apisix
      - shared-net
    environment:
      APISIX_ADMIN_API_KEY: ${APISIX_ADMIN_API_KEY}
      APISIX_ADMIN_API: http://apisix:9180
      ENVIRONMENT: ${ENVIRONMENT}
      BACK_SV_USERS_LOCAL: ${BACK_SV_USERS_LOCAL}
      BACK_SV_USERS_PORT: ${BACK_SV_USERS_PORT}
      BACK_SV_MODELS_LOCAL: ${BACK_SV_MODELS_LOCAL}
      BACK_SV_MODELS_PORT: ${BACK_SV_MODELS_PORT}
      BACK_SV_VISUALIZATIONS_LOCAL: ${BACK_SV_VISUALIZATIONS_LOCAL}
      BACK_SV_VISUALIZATIONS_PORT: ${BACK_SV_VISUALIZATIONS_PORT}
      BACK_SV_USERS_PROD: ${BACK_SV_USERS_PROD}
      BACK_SV_USERS_PROD_PORT: ${BACK_SV_USERS_PROD_PORT}
      BACK_SV_MODELS_PROD: ${BACK_SV_MODELS_PROD}
      BACK_SV_MODELS_PROD_PORT: ${BACK_SV_MODELS_PROD_PORT}
      BACK_SV_VISUALIZATIONS_PROD: ${BACK_SV_VISUALIZATIONS_PROD}
      BACK_SV_VISUALIZATIONS_PROD_PORT: ${BACK_SV_VISUALIZATIONS_PROD_PORT}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_DISCOVERY_URL: ${AUTH0_DISCOVERY_URL}
    command: >
      sh -c "
        apt-get update &&
        apt-get install -y curl &&
        pip install pyyaml requests &&
        echo 'âŒ› Esperando a que APISIX estÃ© listo...' &&
        until [ \"$(curl -s -o /dev/null -w '%{http_code}' -H 'X-API-KEY: ${APISIX_ADMIN_API_KEY}' http://apisix:9180/apisix/admin/routes)\" -eq 200 ]; do
          echo 'ðŸ”„ Esperando...'; sleep 2;
        done &&
        echo 'âœ… APISIX estÃ¡ listo. Ejecutando carga de rutas...' &&
        python load_routes.py"

networks:
  apisix:
    driver: bridge
  shared-net:
    name: shared-net

volumes:
  etcd_data:
    driver: local
